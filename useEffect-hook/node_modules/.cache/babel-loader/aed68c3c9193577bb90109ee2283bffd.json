{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gccc1\\\\Desktop\\\\react-complete-guide\\\\useEffect-hook\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.value,\n      isValid: action.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: ``,\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: ``,\n    isValid: false\n  });\n  useEffect(() => {\n    console.log(`useEffect running 11111111111111111`);\n    return () => console.log(`clean up function executed`);\n  }, []); // useEffect(() => {\n  //   const timeIdetifier = setTimeout(() => {\n  //     setFormIsValid(\n  //       enteredPassword.trim().length > 6 && enteredEmail.includes(\"@\")\n  //     );\n  //   }, 300);\n  //   return () => {\n  //     clearTimeout(timeIdetifier);\n  //   };\n  // }, [enteredPassword, setEnteredEmail]);\n  //  useEffect deals with side effects, in this case when we store some data ures request an http request.\n  // in this application we are refactoring the use of the validation form which was triggered every time\n  //  we entered an email or password .. so checking every key stroke in order to trigger an actio is alos a side effect\n  // The re is a aslo a clena up function... itis the value retturned by the useEffect..\n  // it runs before the useEffect is evaluated for the first time. before it does not run.\n  //  it help us to stop some unnecessary network traffic.\n  //  if there is a clean up function and not dependencies, it will be executed when the compenent is removed.\n  // This i calle ebouncing  ----> which means deactivating any unwanted traffic or sideEffect.\n\n  const emailChangeHandler = event => {\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      value: event.target.value\n    });\n    setFormIsValid(enteredPassword.trim().length > 6 && emailState.isValid);\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid(emailState.value.trim().length > 6 && event.target.value.includes(\"@\"));\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailIsValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: emailState.value,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"oTrT7lp/XKBVbE3Zqu4VuBftRiA=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/gccc1/Desktop/react-complete-guide/useEffect-hook/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","action","type","value","isValid","includes","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","console","log","emailChangeHandler","event","target","trim","length","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer } from \"react\";\n\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return { value: action.value, isValid: action.value.includes(\"@\") };\n  }\n  return { value: ``, isValid: false };\n};\n\nconst Login = (props) => {\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState(\"\");\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: ``,\n    isValid: false,\n  });\n\n  useEffect(() => {\n    console.log(`useEffect running 11111111111111111`);\n    return () => console.log(`clean up function executed`);\n  }, []);\n\n  // useEffect(() => {\n  //   const timeIdetifier = setTimeout(() => {\n  //     setFormIsValid(\n  //       enteredPassword.trim().length > 6 && enteredEmail.includes(\"@\")\n  //     );\n  //   }, 300);\n  //   return () => {\n  //     clearTimeout(timeIdetifier);\n  //   };\n  // }, [enteredPassword, setEnteredEmail]);\n\n  //  useEffect deals with side effects, in this case when we store some data ures request an http request.\n  // in this application we are refactoring the use of the validation form which was triggered every time\n  //  we entered an email or password .. so checking every key stroke in order to trigger an actio is alos a side effect\n\n  // The re is a aslo a clena up function... itis the value retturned by the useEffect..\n  // it runs before the useEffect is evaluated for the first time. before it does not run.\n  //  it help us to stop some unnecessary network traffic.\n\n  //  if there is a clean up function and not dependencies, it will be executed when the compenent is removed.\n\n  // This i calle ebouncing  ----> which means deactivating any unwanted traffic or sideEffect.\n\n  const emailChangeHandler = (event) => {\n    dispatchEmail({ type: \"USER_INPUT\", value: event.target.value });\n    setFormIsValid(enteredPassword.trim().length > 6 && emailState.isValid);\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n    setFormIsValid(\n      emailState.value.trim().length > 6 && event.target.value.includes(\"@\")\n    );\n  };\n\n  const validateEmailHandler = () => {\n    setEmailIsValid(emailState.isValid);\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(emailState.value, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailIsValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={emailState.value}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : \"\"\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}