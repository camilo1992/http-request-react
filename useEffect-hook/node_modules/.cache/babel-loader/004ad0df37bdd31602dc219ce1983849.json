{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gccc1\\\\Desktop\\\\react-complete-guide\\\\useEffect-hook\\\\src\\\\context\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\n// we are creating a file with lower cases\n//otherwise it will inply that we are creating a component\n// this is a context\nimport react, { useState, useEffect } from \"react\"; //  Thi create a context object.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/react.createContext({\n  isLoggedIn: false,\n  isLoggedout: () => {}\n});\nexport const AuthContextProvider = props => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const userLoggedInInfo = localStorage.getItem(\"isLoggedIn\");\n\n    if (userLoggedInInfo === \"1\") {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    localStorage.setItem(\"isLoggedIn\", \"1\");\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n    localStorage.clear(\"isLoggedIn\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn: isLoggedIn,\n      onlogOut: logoutHandler,\n      onLogg\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = AuthContextProvider;\nexport default AuthContext; // In order to use this context we need to provide it and consume it.\n// Providing\n// ---> we need to wrap any component taht is gonna listen to it.\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/gccc1/Desktop/react-complete-guide/useEffect-hook/src/context/auth-context.js"],"names":["react","useState","useEffect","AuthContext","createContext","isLoggedIn","isLoggedout","AuthContextProvider","props","setIsLoggedIn","userLoggedInInfo","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","clear","onlogOut","onLogg","children"],"mappings":";;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CACA;;;AAEA,MAAMC,WAAW,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AACtCC,EAAAA,UAAU,EAAE,KAD0B;AAEtCC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAFiB,CAApB,CAApB;AAKA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACH,UAAD,EAAaI,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAzB;;AAEA,QAAIF,gBAAgB,KAAK,GAAzB,EAA8B;AAC5BD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AACAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmC,GAAnC;AAEAP,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAND;;AAQA,QAAMQ,aAAa,GAAG,MAAM;AAC1BR,IAAAA,aAAa,CAAC,KAAD,CAAb;AAEAE,IAAAA,YAAY,CAACO,KAAb,CAAmB,YAAnB;AACD,GAJD;;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEb,MAAAA,UAAU,EAAEA,UAAd;AAA0Bc,MAAAA,QAAQ,EAAEF,aAApC;AAAmDG,MAAAA;AAAnD,KADT;AAAA,cAGGZ,KAAK,CAACa;AAHT;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAhCM;;GAAMd,mB;;KAAAA,mB;AAkCb,eAAeJ,WAAf,C,CAEA;AACA;AACA","sourcesContent":["// we are creating a file with lower cases\r\n//otherwise it will inply that we are creating a component\r\n// this is a context\r\n\r\nimport react, { useState, useEffect } from \"react\";\r\n//  Thi create a context object.\r\n\r\nconst AuthContext = react.createContext({\r\n  isLoggedIn: false,\r\n  isLoggedout: () => {},\r\n});\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const userLoggedInInfo = localStorage.getItem(\"isLoggedIn\");\r\n\r\n    if (userLoggedInInfo === \"1\") {\r\n      setIsLoggedIn(true);\r\n    }\r\n  }, []);\r\n\r\n  const loginHandler = (email, password) => {\r\n    // We should of course check email and password\r\n    // But it's just a dummy/ demo anyways\r\n    localStorage.setItem(\"isLoggedIn\", \"1\");\r\n\r\n    setIsLoggedIn(true);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    setIsLoggedIn(false);\r\n\r\n    localStorage.clear(\"isLoggedIn\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ isLoggedIn: isLoggedIn, onlogOut: logoutHandler, onLogg }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n\r\n// In order to use this context we need to provide it and consume it.\r\n// Providing\r\n// ---> we need to wrap any component taht is gonna listen to it.\r\n"]},"metadata":{},"sourceType":"module"}